{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JavaScript &amp; React Course Notes","text":"<p>Welcome to my comprehensive collection of JavaScript and React learning notes! This documentation contains structured notes, examples, and code snippets from my journey learning modern web development.</p>"},{"location":"#whats-inside","title":"\ud83d\udcda What's Inside","text":""},{"location":"#javascript-section","title":"JavaScript Section","text":"<ul> <li>JS Basics: Fundamental concepts including variables, operators, and data types</li> <li>Intermediate: Advanced topics like destructuring, spread/rest operators, and logical operators</li> <li>Code Snippets: Reusable utility functions and practical examples</li> </ul>"},{"location":"#react-section","title":"React Section","text":"<ul> <li>Coming soon! This section will contain comprehensive React notes and examples</li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Navigate through the sections using the navigation menu above. Each section contains:</p> <ul> <li>Clear explanations with examples</li> <li>Code snippets you can copy and use</li> <li>Real-world use cases and best practices</li> </ul>"},{"location":"#how-to-use-these-notes","title":"\ud83d\udcd6 How to Use These Notes","text":"<ul> <li>Use the search function (Ctrl+K or Cmd+K) to quickly find specific topics</li> <li>Code blocks include copy buttons for easy usage</li> <li>Toggle between light and dark themes using the theme switcher</li> </ul> <p>Last updated: June 2025</p>"},{"location":"javascript/","title":"JavaScript Course Notes","text":"<p>Welcome to the JavaScript course notes following \"The Complete JavaScript Course 2024\" structure. These notes are organized by course sections to help you learn JavaScript systematically.</p>"},{"location":"javascript/#course-sections","title":"\ud83d\udcda Course Sections","text":""},{"location":"javascript/#foundation","title":"Foundation","text":"<ul> <li>Section 1: Welcome - Course overview and setup</li> <li>Section 2: JavaScript Fundamentals Part 1 - Variables, data types, operators</li> <li>Section 3: JavaScript Fundamentals Part 2 - Functions, arrays, objects</li> <li>Section 4: How to Navigate This Course - Learning strategies and tips</li> </ul>"},{"location":"javascript/#browser-advanced-concepts","title":"Browser &amp; Advanced Concepts","text":"<ul> <li>Section 7: JavaScript in the Browser - DOM manipulation and events</li> <li>Section 8: How JavaScript Works Behind the Scenes - Execution context, hoisting, scope</li> <li>Section 9: Data Structures &amp; Modern Operators - Destructuring, spread, rest, sets, maps</li> </ul>"},{"location":"javascript/#learning-approach","title":"\ud83c\udfaf Learning Approach","text":"<ol> <li>Read the concepts - Understand the theory first</li> <li>Study the code patterns - See practical examples</li> <li>Practice actively - Write code and experiment</li> <li>Build projects - Apply what you've learned</li> </ol>"},{"location":"javascript/#quick-reference","title":"\ud83d\udd17 Quick Reference","text":"<ul> <li>MDN Documentation: JavaScript Reference</li> <li>ES6+ Features: Modern JavaScript syntax and features</li> <li>Best Practices: Clean, readable, and maintainable code</li> </ul> <p>Happy coding! \ud83d\ude80</p>"},{"location":"javascript/01-welcome/","title":"Section 1: Welcome","text":""},{"location":"javascript/01-welcome/#key-concepts","title":"Key Concepts","text":"<ul> <li> <p>What is JavaScript?</p> </li> <li> <p>High-level, object-oriented, multi-paradigm programming language</p> </li> <li>Interpreted or just-in-time compiled</li> <li>Dynamic, weakly typed language</li> <li>Prototype-based object-oriented programming</li> <li>First-class functions</li> <li>Event-driven, non-blocking event loop</li> <li> <p>Backwards compatible to ES1 (1997)</p> </li> <li> <p>Role of JavaScript</p> </li> <li> <p>The programming language of the web</p> </li> <li>Frontend: React, Angular, Vue</li> <li>Backend: Node.js</li> <li>Mobile: React Native, Ionic</li> <li> <p>Desktop: Electron</p> </li> <li> <p>Modern Development Setup</p> </li> <li>Code editor (VS Code)</li> <li>Browser developer tools</li> <li>Version control (Git)</li> <li>Package managers (npm, yarn)</li> <li>Build tools (Webpack, Vite)</li> </ul>"},{"location":"javascript/01-welcome/#code-patterns","title":"Code Patterns","text":"<pre><code>// Your first JavaScript program\nconsole.log('Hello, World!');\n\n// Variables and basic data types\nlet name = 'John';\nconst age = 30;\nvar isStudent = true;\n\n// Basic function\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet('JavaScript'));\n</code></pre>"},{"location":"javascript/01-welcome/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"javascript/01-welcome/#essential-tools","title":"Essential Tools","text":"<ul> <li>Browser: Chrome/Firefox with DevTools</li> <li>Editor: VS Code with extensions</li> <li>Terminal: Command line basics</li> <li>Git: Version control fundamentals</li> </ul>"},{"location":"javascript/01-welcome/#vs-code-extensions","title":"VS Code Extensions","text":"<ul> <li>JavaScript (ES6) code snippets</li> <li>Prettier - Code formatter</li> <li>Live Server</li> <li>Bracket Pair Colorizer</li> </ul>"},{"location":"javascript/01-welcome/#browser-developer-tools","title":"Browser Developer Tools","text":"<ul> <li>Console: Testing JavaScript code</li> <li>Elements: HTML/CSS inspection</li> <li>Sources: Debugging JavaScript</li> <li>Network: HTTP requests monitoring</li> </ul>"},{"location":"javascript/01-welcome/#next-steps","title":"Next Steps","text":"<ol> <li>Set up your development environment</li> <li>Practice using the browser console</li> <li>Write your first JavaScript program</li> <li>Move on to JavaScript Fundamentals Part 1</li> </ol> <p>Welcome to your JavaScript journey! \ud83c\udf89</p>"},{"location":"javascript/02-fundamentals-part-1/","title":"Section 2: JavaScript Fundamentals Part 1","text":""},{"location":"javascript/02-fundamentals-part-1/#key-concepts","title":"Key Concepts","text":"<ul> <li> <p>Values and Variables</p> </li> <li> <p>Values: Pieces of data (numbers, strings, booleans)</p> </li> <li>Variables: Containers that store values</li> <li>Naming conventions: camelCase, descriptive names</li> <li> <p>Reserved keywords cannot be used as variable names</p> </li> <li> <p>Data Types</p> </li> <li> <p>Primitive types: Number, String, Boolean, Undefined, Null, Symbol, BigInt</p> </li> <li>Dynamic typing: Variables can change types</li> <li><code>typeof</code> operator to check data types</li> <li> <p>JavaScript has only one number type (floating point)</p> </li> <li> <p>Variable Declarations</p> </li> <li> <p><code>let</code>: Block-scoped, can be reassigned</p> </li> <li><code>const</code>: Block-scoped, cannot be reassigned</li> <li><code>var</code>: Function-scoped, avoid in modern JavaScript</li> <li> <p>Always declare variables before using them</p> </li> <li> <p>Operators</p> </li> <li>Arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>**</code></li> <li>Assignment: <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>++</code>, <code>--</code></li> <li>Comparison: <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>===</code>, <code>!==</code></li> <li>Logical: <code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li> </ul>"},{"location":"javascript/02-fundamentals-part-1/#code-patterns","title":"Code Patterns","text":"<pre><code>// Variable declarations\nlet firstName = 'John';\nconst birthYear = 1990;\nlet currentYear = 2024;\n\n// Data types\nlet age = 30; // Number\nlet fullName = 'John Doe'; // String\nlet isAdult = true; // Boolean\nlet children; // Undefined\nlet car = null; // Null\n\nconsole.log(typeof age); // \"number\"\nconsole.log(typeof fullName); // \"string\"\nconsole.log(typeof isAdult); // \"boolean\"\nconsole.log(typeof children); // \"undefined\"\nconsole.log(typeof car); // \"object\" (quirk of JavaScript)\n\n// Arithmetic operators\nconst ageJohn = currentYear - birthYear;\nconst ageSarah = currentYear - 1995;\nconsole.log(ageJohn, ageSarah);\n\n// Assignment operators\nlet x = 10 + 5; // 15\nx += 10; // x = x + 10 = 25\nx *= 4; // x = x * 4 = 100\nx++; // x = x + 1 = 101\nx--; // x = x - 1 = 100\n\n// Comparison operators\nconsole.log(ageJohn &gt; ageSarah); // true\nconsole.log(ageSarah &gt;= 18); // true\n\n// Template literals (ES6)\nconst john = \"I'm John, and I'm \" + age + ' years old.';\nconst johnNew = `I'm John, and I'm ${age} years old.`;\n\n// Multiline strings\nconst multiLine = `String with\nmultiple\nlines`;\n\n// Type conversion and coercion\nconst inputYear = '1991';\nconsole.log(Number(inputYear) + 18); // 2009\nconsole.log(inputYear + 18); // '199118' (string concatenation)\n\n// Truthy and falsy values\n// 5 falsy values: 0, '', undefined, null, NaN\nconsole.log(Boolean(0)); // false\nconsole.log(Boolean('')); // false\nconsole.log(Boolean('Hello')); // true\nconsole.log(Boolean({})); // true\n\n// Equality operators\nconst age1 = 18;\nif (age1 === 18) console.log('You just became an adult! (strict)');\nif (age1 == 18) console.log('You just became an adult! (loose)');\n\n// Always use === (strict equality)\nconst favourite = Number(prompt(\"What's your favourite number?\"));\nif (favourite === 23) {\n  console.log('Cool! 23 is an amazing number!');\n}\n\n// Logical operators\nconst hasDriversLicense = true;\nconst hasGoodVision = true;\nconst isTired = false;\n\nconsole.log(hasDriversLicense &amp;&amp; hasGoodVision); // true\nconsole.log(hasDriversLicense || hasGoodVision); // true\nconsole.log(!isTired); // true\n\nif (hasDriversLicense &amp;&amp; hasGoodVision &amp;&amp; !isTired) {\n  console.log('Sarah is able to drive!');\n} else {\n  console.log('Someone else should drive...');\n}\n</code></pre>"},{"location":"javascript/02-fundamentals-part-1/#important-notes","title":"Important Notes","text":""},{"location":"javascript/02-fundamentals-part-1/#variable-naming-best-practices","title":"Variable Naming Best Practices","text":"<pre><code>// Good\nlet firstName = 'John';\nlet currentYear = 2024;\nlet isAdult = true;\n\n// Avoid\nlet n = 'John'; // Not descriptive\nlet year = 2024; // Could be birth year, current year, etc.\nlet PI = 3.1415; // Use const for constants\n</code></pre>"},{"location":"javascript/02-fundamentals-part-1/#type-coercion-gotchas","title":"Type Coercion Gotchas","text":"<pre><code>console.log('10' - '4' - '3' - 2 + '5'); // \"15\"\n// Explanation: \"10\" - \"4\" - \"3\" = 3, 3 - 2 = 1, 1 + \"5\" = \"15\"\n\nconsole.log(2 + 3 + 4 + '5'); // \"95\"\nconsole.log('10' - '4' - '3' - 2 + '5'); // \"15\"\n</code></pre>"},{"location":"javascript/02-fundamentals-part-1/#conditional-ternary-operator","title":"Conditional (Ternary) Operator","text":"<pre><code>const age = 23;\nconst drink = age &gt;= 18 ? 'wine' : 'water';\nconsole.log(drink);\n\n// In template literals\nconsole.log(`I like to drink ${age &gt;= 18 ? 'wine' : 'water'}`);\n</code></pre>"},{"location":"javascript/02-fundamentals-part-1/#common-mistakes-to-avoid","title":"Common Mistakes to Avoid","text":"<ol> <li>Using <code>var</code> instead of <code>let</code>/<code>const</code></li> <li>Confusing <code>=</code> (assignment) with <code>===</code> (comparison)</li> <li>Using <code>==</code> instead of <code>===</code></li> <li>Not understanding type coercion</li> <li>Forgetting to declare variables</li> </ol> <p>Master these fundamentals before moving to Part 2! \ud83d\udcaa</p>"},{"location":"javascript/03-fundamentals-part-2/","title":"Section 3: JavaScript Fundamentals Part 2","text":""},{"location":"javascript/03-fundamentals-part-2/#key-concepts","title":"Key Concepts","text":"<ul> <li> <p>Functions</p> </li> <li> <p>Reusable blocks of code that perform specific tasks</p> </li> <li>Function declarations: Hoisted, can be called before definition</li> <li>Function expressions: Stored in variables, not hoisted</li> <li>Arrow functions: Concise syntax, lexical <code>this</code> binding</li> <li>Parameters and arguments: Input values for functions</li> <li> <p>Return values: Output from functions</p> </li> <li> <p>Arrays</p> </li> <li> <p>Ordered collections of values (elements)</p> </li> <li>Zero-based indexing</li> <li>Dynamic size - can grow and shrink</li> <li>Can hold different data types</li> <li> <p>Many built-in methods for manipulation</p> </li> <li> <p>Objects</p> </li> <li> <p>Key-value pairs (properties and methods)</p> </li> <li>Property access: dot notation vs bracket notation</li> <li>Object methods: functions as object properties</li> <li> <p><code>this</code> keyword refers to the object</p> </li> <li> <p>Control Structures</p> </li> <li>Conditional statements: <code>if</code>, <code>else if</code>, <code>else</code></li> <li>Switch statements: Multiple conditions</li> <li>Loops: <code>for</code>, <code>while</code>, <code>do-while</code></li> <li>Loop control: <code>break</code>, <code>continue</code></li> </ul>"},{"location":"javascript/03-fundamentals-part-2/#code-patterns","title":"Code Patterns","text":""},{"location":"javascript/03-fundamentals-part-2/#functions","title":"Functions","text":"<pre><code>// Function declaration (hoisted)\nfunction calcAge1(birthYear) {\n  return 2024 - birthYear;\n}\n\n// Function expression (not hoisted)\nconst calcAge2 = function (birthYear) {\n  return 2024 - birthYear;\n};\n\n// Arrow function (ES6)\nconst calcAge3 = (birthYear) =&gt; 2024 - birthYear;\n\n// Arrow function with multiple parameters\nconst calcAge4 = (birthYear, currentYear) =&gt; currentYear - birthYear;\n\n// Arrow function with multiple statements\nconst yearsUntilRetirement = (birthYear, firstName) =&gt; {\n  const age = 2024 - birthYear;\n  const retirement = 65 - age;\n  return `${firstName} retires in ${retirement} years`;\n};\n\n// Functions calling other functions\nfunction cutFruitPieces(fruit) {\n  return fruit * 4;\n}\n\nfunction fruitProcessor(apples, oranges) {\n  const applePieces = cutFruitPieces(apples);\n  const orangePieces = cutFruitPieces(oranges);\n\n  const juice = `Juice with ${applePieces} apple pieces and ${orangePieces} orange pieces.`;\n  return juice;\n}\n\nconsole.log(fruitProcessor(2, 3));\n</code></pre>"},{"location":"javascript/03-fundamentals-part-2/#arrays","title":"Arrays","text":"<pre><code>// Array creation\nconst friends = ['Michael', 'Steven', 'Peter'];\nconst years = new Array(1991, 1984, 2008, 2020);\n\n// Array properties and methods\nconsole.log(friends.length); // 3\nconsole.log(friends[0]); // 'Michael'\nconsole.log(friends[friends.length - 1]); // 'Peter'\n\n// Mutating arrays (even with const)\nfriends[2] = 'Jay';\nconsole.log(friends); // ['Michael', 'Steven', 'Jay']\n\n// Array methods\nfriends.push('Jim'); // Add to end\nfriends.unshift('John'); // Add to beginning\nfriends.pop(); // Remove from end\nfriends.shift(); // Remove from beginning\n\nconsole.log(friends.indexOf('Steven')); // 1\nconsole.log(friends.includes('Steven')); // true\n\n// Mixed data types\nconst john = ['John', 'Smith', 2024 - 1991, 'teacher', friends];\n\n// Array exercises\nconst calcTip = function (bill) {\n  return bill &gt;= 50 &amp;&amp; bill &lt;= 300 ? bill * 0.15 : bill * 0.2;\n};\n\nconst bills = [125, 555, 44];\nconst tips = [calcTip(bills[0]), calcTip(bills[1]), calcTip(bills[2])];\nconst totals = [bills[0] + tips[0], bills[1] + tips[1], bills[2] + tips[2]];\n</code></pre>"},{"location":"javascript/03-fundamentals-part-2/#objects","title":"Objects","text":"<pre><code>// Object literal\nconst john = {\n  firstName: 'John',\n  lastName: 'Smith',\n  age: 2024 - 1991,\n  job: 'teacher',\n  friends: ['Michael', 'Peter', 'Steven'],\n};\n\n// Accessing properties\nconsole.log(john.lastName); // Dot notation\nconsole.log(john['lastName']); // Bracket notation\n\n// Dynamic property access\nconst nameKey = 'Name';\nconsole.log(john['first' + nameKey]); // 'John'\nconsole.log(john['last' + nameKey]); // 'Smith'\n\n// Adding new properties\njohn.location = 'Portugal';\njohn['twitter'] = '@jonasschmedtman';\n\n// Object methods\nconst john = {\n  firstName: 'John',\n  lastName: 'Smith',\n  birthYear: 1991,\n  job: 'teacher',\n  friends: ['Michael', 'Peter', 'Steven'],\n  hasDriversLicense: true,\n\n  // Method (function as property)\n  calcAge: function () {\n    this.age = 2024 - this.birthYear;\n    return this.age;\n  },\n\n  // Method with logic\n  getSummary: function () {\n    return `${this.firstName} is a ${this.calcAge()}-year old ${\n      this.job\n    }, and he has ${this.hasDriversLicense ? 'a' : 'no'} driver's license.`;\n  },\n};\n\nconsole.log(john.calcAge()); // 33\nconsole.log(john.age); // 33 (stored as property)\nconsole.log(john.getSummary());\n</code></pre>"},{"location":"javascript/03-fundamentals-part-2/#loops","title":"Loops","text":"<pre><code>// For loop\nfor (let rep = 1; rep &lt;= 10; rep++) {\n  console.log(`Lifting weights repetition ${rep}`);\n}\n\n// Looping arrays\nconst john = [\n  'John',\n  'Smith',\n  2024 - 1991,\n  'teacher',\n  ['Michael', 'Peter', 'Steven'],\n];\nconst types = [];\n\nfor (let i = 0; i &lt; john.length; i++) {\n  console.log(john[i], typeof john[i]);\n\n  // Filling types array\n  types[i] = typeof john[i];\n  // or types.push(typeof john[i]);\n}\n\n// Continue and break\nfor (let i = 0; i &lt; john.length; i++) {\n  if (typeof john[i] !== 'string') continue;\n  console.log(john[i], typeof john[i]);\n}\n\nfor (let i = 0; i &lt; john.length; i++) {\n  if (typeof john[i] === 'number') break;\n  console.log(john[i], typeof john[i]);\n}\n\n// Looping backwards\nfor (let i = john.length - 1; i &gt;= 0; i--) {\n  console.log(i, john[i]);\n}\n\n// Nested loops\nfor (let exercise = 1; exercise &lt; 4; exercise++) {\n  console.log(`-------- Starting exercise ${exercise}`);\n\n  for (let rep = 1; rep &lt; 6; rep++) {\n    console.log(`Exercise ${exercise}: Lifting weight repetition ${rep}`);\n  }\n}\n\n// While loop\nlet rep = 1;\nwhile (rep &lt;= 10) {\n  console.log(`Lifting weights repetition ${rep}`);\n  rep++;\n}\n\n// While loop with random condition\nlet dice = Math.trunc(Math.random() * 6) + 1;\nwhile (dice !== 6) {\n  console.log(`You rolled a ${dice}`);\n  dice = Math.trunc(Math.random() * 6) + 1;\n  if (dice === 6) console.log('Loop is about to end...');\n}\n</code></pre>"},{"location":"javascript/03-fundamentals-part-2/#practical-exercises","title":"Practical Exercises","text":""},{"location":"javascript/03-fundamentals-part-2/#bmi-calculator","title":"BMI Calculator","text":"<pre><code>const mark = {\n  fullName: 'Mark Miller',\n  mass: 78,\n  height: 1.69,\n  calcBMI: function () {\n    this.bmi = this.mass / this.height ** 2;\n    return this.bmi;\n  },\n};\n\nconst john = {\n  fullName: 'John Smith',\n  mass: 92,\n  height: 1.95,\n  calcBMI: function () {\n    this.bmi = this.mass / this.height ** 2;\n    return this.bmi;\n  },\n};\n\nmark.calcBMI();\njohn.calcBMI();\n\nif (mark.bmi &gt; john.bmi) {\n  console.log(\n    `${mark.fullName}'s BMI (${mark.bmi}) is higher than ${john.fullName}'s BMI (${john.bmi})`\n  );\n} else if (john.bmi &gt; mark.bmi) {\n  console.log(\n    `${john.fullName}'s BMI (${john.bmi}) is higher than ${mark.fullName}'s BMI (${mark.bmi})`\n  );\n}\n</code></pre>"},{"location":"javascript/03-fundamentals-part-2/#tip-calculator-with-arrays","title":"Tip Calculator with Arrays","text":"<pre><code>const calcTip = function (bill) {\n  return bill &gt;= 50 &amp;&amp; bill &lt;= 300 ? bill * 0.15 : bill * 0.2;\n};\n\nconst bills = [22, 295, 176, 440, 37, 105, 10, 1100, 86, 52];\nconst tips = [];\nconst totals = [];\n\nfor (let i = 0; i &lt; bills.length; i++) {\n  const tip = calcTip(bills[i]);\n  tips.push(tip);\n  totals.push(tip + bills[i]);\n}\n\nconsole.log(bills, tips, totals);\n\n// Bonus: Calculate average\nconst calcAverage = function (arr) {\n  let sum = 0;\n  for (let i = 0; i &lt; arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum / arr.length;\n};\n\nconsole.log(calcAverage(totals));\n</code></pre>"},{"location":"javascript/03-fundamentals-part-2/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Functions are the building blocks of JavaScript applications</li> <li>Arrays and objects are fundamental data structures</li> <li>Practice different ways to create and manipulate them</li> <li>Understand when to use each loop type</li> <li>Methods (<code>this</code> keyword) make objects powerful</li> <li>Always think about reusability when writing functions</li> </ol> <p>These fundamentals form the foundation of all JavaScript programming! \ud83d\udd25</p>"},{"location":"javascript/04-how-to-navigate/","title":"Section 4: How to Navigate This Course","text":""},{"location":"javascript/04-how-to-navigate/#key-concepts","title":"Key Concepts","text":"<ul> <li> <p>Learning Strategies</p> </li> <li> <p>Active learning vs passive consumption</p> </li> <li>Code along with examples</li> <li>Build projects to reinforce concepts</li> <li>Debug and fix errors as learning opportunities</li> <li> <p>Practice regularly with small coding sessions</p> </li> <li> <p>Effective Study Methods</p> </li> <li> <p>Pomodoro Technique: 25-minute focused sessions</p> </li> <li>Spaced Repetition: Review concepts multiple times over days/weeks</li> <li>Teaching Others: Explain concepts to solidify understanding</li> <li> <p>Documentation Reading: Get comfortable with MDN and official docs</p> </li> <li> <p>Problem-Solving Framework</p> </li> <li> <p>Understand the problem: Read requirements carefully</p> </li> <li>Break it down: Divide into smaller sub-problems</li> <li>Research: Look for similar solutions and patterns</li> <li>Pseudocode: Plan before coding</li> <li>Code: Implement step by step</li> <li>Test: Verify your solution works</li> <li> <p>Refactor: Improve and optimize</p> </li> <li> <p>Debugging Mindset</p> </li> <li>Errors are normal and valuable learning opportunities</li> <li>Read error messages carefully</li> <li>Use <code>console.log()</code> to trace execution</li> <li>Use browser developer tools</li> <li>Break down complex problems</li> </ul>"},{"location":"javascript/04-how-to-navigate/#code-patterns","title":"Code Patterns","text":""},{"location":"javascript/04-how-to-navigate/#debugging-techniques","title":"Debugging Techniques","text":"<pre><code>// Console logging for debugging\nfunction calcAge(birthYear) {\n  console.log('Input birthYear:', birthYear); // Debug input\n  const age = 2024 - birthYear;\n  console.log('Calculated age:', age); // Debug calculation\n  return age;\n}\n\n// Using console.table for arrays/objects\nconst users = [\n  { name: 'John', age: 30 },\n  { name: 'Jane', age: 25 },\n  { name: 'Bob', age: 35 },\n];\nconsole.table(users);\n\n// Error handling with try-catch\nfunction safeDivision(a, b) {\n  try {\n    if (b === 0) {\n      throw new Error('Division by zero!');\n    }\n    return a / b;\n  } catch (error) {\n    console.error('Error:', error.message);\n    return null;\n  }\n}\n\n// Debugging with breakpoints (in browser DevTools)\nfunction complexCalculation(arr) {\n  debugger; // This will pause execution in DevTools\n  let result = 0;\n  for (let i = 0; i &lt; arr.length; i++) {\n    result += arr[i] * 2;\n    console.log(`Step ${i}: result = ${result}`);\n  }\n  return result;\n}\n</code></pre>"},{"location":"javascript/04-how-to-navigate/#learning-by-building","title":"Learning by Building","text":"<pre><code>// Project: Simple Todo List (demonstrates multiple concepts)\nconst todoApp = {\n  todos: [],\n\n  addTodo: function (text) {\n    const todo = {\n      id: Date.now(), // Simple ID generation\n      text: text,\n      completed: false,\n      createdAt: new Date(),\n    };\n    this.todos.push(todo);\n    console.log('Todo added:', todo);\n  },\n\n  removeTodo: function (id) {\n    const index = this.todos.findIndex((todo) =&gt; todo.id === id);\n    if (index !== -1) {\n      const removed = this.todos.splice(index, 1);\n      console.log('Todo removed:', removed[0]);\n    }\n  },\n\n  toggleTodo: function (id) {\n    const todo = this.todos.find((todo) =&gt; todo.id === id);\n    if (todo) {\n      todo.completed = !todo.completed;\n      console.log('Todo toggled:', todo);\n    }\n  },\n\n  listTodos: function () {\n    console.log('All todos:');\n    this.todos.forEach((todo, index) =&gt; {\n      const status = todo.completed ? '\u2705' : '\u274c';\n      console.log(`${index + 1}. ${status} ${todo.text}`);\n    });\n  },\n\n  getStats: function () {\n    const total = this.todos.length;\n    const completed = this.todos.filter((todo) =&gt; todo.completed).length;\n    const pending = total - completed;\n\n    console.log(\n      `Stats: ${total} total, ${completed} completed, ${pending} pending`\n    );\n  },\n};\n\n// Usage examples\ntodoApp.addTodo('Learn JavaScript');\ntodoApp.addTodo('Build a project');\ntodoApp.addTodo('Practice debugging');\ntodoApp.listTodos();\ntodoApp.toggleTodo(todoApp.todos[0].id);\ntodoApp.getStats();\n</code></pre>"},{"location":"javascript/04-how-to-navigate/#problem-solving-practice","title":"Problem-Solving Practice","text":"<pre><code>// Example: FizzBuzz (classic programming problem)\nfunction fizzBuzz(n) {\n  // Step 1: Understand - print numbers 1 to n, but:\n  // - \"Fizz\" for multiples of 3\n  // - \"Buzz\" for multiples of 5\n  // - \"FizzBuzz\" for multiples of both\n\n  // Step 2: Break down\n  // - Loop from 1 to n\n  // - Check divisibility conditions\n  // - Print appropriate output\n\n  for (let i = 1; i &lt;= n; i++) {\n    let output = '';\n\n    if (i % 3 === 0) output += 'Fizz';\n    if (i % 5 === 0) output += 'Buzz';\n\n    console.log(output || i); // Use number if output is empty\n  }\n}\n\n// Test the solution\nfizzBuzz(15);\n\n// Refactored version with function\nfunction getFizzBuzzValue(num) {\n  if (num % 15 === 0) return 'FizzBuzz';\n  if (num % 3 === 0) return 'Fizz';\n  if (num % 5 === 0) return 'Buzz';\n  return num;\n}\n\nfunction fizzBuzzRefactored(n) {\n  for (let i = 1; i &lt;= n; i++) {\n    console.log(getFizzBuzzValue(i));\n  }\n}\n</code></pre>"},{"location":"javascript/04-how-to-navigate/#study-plan-template","title":"Study Plan Template","text":""},{"location":"javascript/04-how-to-navigate/#daily-practice-30-60-minutes","title":"Daily Practice (30-60 minutes)","text":"<pre><code>// Week 1-2: Fundamentals\nconst dailyPractice = {\n  review: 'Previous day concepts (10 min)',\n  newContent: 'New lesson/section (20-30 min)',\n  coding: 'Practice exercises (15-20 min)',\n  projects: 'Work on small project (weekend)',\n};\n\n// Week 3-4: Intermediate\nconst intermediatePractice = {\n  review: 'Code from previous day (10 min)',\n  newContent: 'Advanced concepts (25 min)',\n  problemSolving: 'Coding challenges (20 min)',\n  projects: 'Larger project work (weekend)',\n};\n</code></pre>"},{"location":"javascript/04-how-to-navigate/#learning-milestones","title":"Learning Milestones","text":"<pre><code>// Self-assessment checklist\nconst fundamentalsChecklist = {\n  variables: 'Can declare and use let, const, var appropriately',\n  dataTypes: 'Understand primitives vs objects',\n  functions: 'Can write and call functions confidently',\n  arrays: 'Can manipulate arrays with methods',\n  objects: 'Can create and work with object properties/methods',\n  loops: 'Can use for/while loops effectively',\n  conditions: 'Can write complex conditional logic',\n};\n\n// Progress tracking\nfunction assessSkill(skillName, level) {\n  // level: 1-5 (beginner to expert)\n  const skills = {\n    1: 'Just learning',\n    2: 'Can follow examples',\n    3: 'Can solve simple problems',\n    4: 'Can solve complex problems',\n    5: 'Can teach others',\n  };\n\n  console.log(`${skillName}: ${skills[level]}`);\n}\n\n// Example usage\nassessSkill('Functions', 3);\nassessSkill('Arrays', 4);\n</code></pre>"},{"location":"javascript/04-how-to-navigate/#resources-for-continued-learning","title":"Resources for Continued Learning","text":""},{"location":"javascript/04-how-to-navigate/#essential-documentation","title":"Essential Documentation","text":"<ul> <li>MDN Web Docs: Comprehensive JavaScript reference</li> <li>JavaScript.info: Modern tutorial with examples</li> <li>ECMAScript Specification: Official language standard</li> </ul>"},{"location":"javascript/04-how-to-navigate/#practice-platforms","title":"Practice Platforms","text":"<ul> <li>Codewars: Algorithm challenges</li> <li>LeetCode: Interview preparation</li> <li>freeCodeCamp: Structured curriculum</li> <li>JavaScript30: 30-day vanilla JS challenge</li> </ul>"},{"location":"javascript/04-how-to-navigate/#debugging-tools","title":"Debugging Tools","text":"<ul> <li>Browser DevTools: Console, debugger, network</li> <li>VS Code Debugger: Integrated debugging</li> <li>console methods: log, error, warn, table, time</li> </ul>"},{"location":"javascript/04-how-to-navigate/#common-learning-mistakes-to-avoid","title":"Common Learning Mistakes to Avoid","text":"<ol> <li>Tutorial Hell: Don't just watch/read - code along!</li> <li>Perfectionism: Start with working code, then improve</li> <li>Skipping Fundamentals: Master basics before moving to frameworks</li> <li>Not Reading Errors: Error messages contain valuable information</li> <li>Comparing to Others: Focus on your own progress</li> <li>Not Building Projects: Theory without practice isn't enough</li> </ol> <p>Remember: Consistency beats intensity. Code a little every day! \ud83d\ude80</p>"},{"location":"javascript/07-dom-and-events/","title":"Section 7: JavaScript in the Browser - DOM and Events","text":""},{"location":"javascript/07-dom-and-events/#key-concepts","title":"Key Concepts","text":"<ul> <li> <p>Document Object Model (DOM)</p> </li> <li> <p>Tree-like representation of HTML document</p> </li> <li>JavaScript can read, change, and manipulate HTML elements</li> <li>Each HTML element is a DOM node</li> <li>DOM is not part of JavaScript language, it's a Web API</li> <li> <p>Think of it as: A bridge between HTML and JavaScript that allows dynamic web pages</p> </li> <li> <p>Selecting Elements</p> </li> <li> <p><code>document.querySelector()</code>: Select first matching element</p> </li> <li><code>document.querySelectorAll()</code>: Select all matching elements</li> <li><code>document.getElementById()</code>: Select by ID</li> <li><code>document.getElementsByClassName()</code>: Select by class name</li> <li><code>document.getElementsByTagName()</code>: Select by tag name</li> <li> <p>Best practice: Use <code>querySelector()</code> and <code>querySelectorAll()</code> for consistency and flexibility</p> </li> <li> <p>Manipulating Elements</p> </li> <li> <p><code>textContent</code>: Get/set text content (safer, no HTML parsing)</p> </li> <li><code>innerHTML</code>: Get/set HTML content (can insert HTML elements)</li> <li><code>value</code>: Get/set input values (for form elements)</li> <li><code>style</code>: Modify CSS styles (inline styles only)</li> <li><code>classList</code>: Add/remove/toggle CSS classes (preferred over className)</li> <li><code>setAttribute()</code>: Set HTML attributes</li> <li> <p>Performance tip: Cache DOM selections in variables to avoid repeated queries</p> </li> <li> <p>Events and Event Handling</p> </li> <li>Events: Actions that happen on the webpage (user interactions, page loading, etc.)</li> <li>Event listeners: Functions that respond to events (like a doorbell responding to a button press)</li> <li>Common events: click, keydown, load, submit, mouseover</li> <li><code>addEventListener()</code>: Modern way to handle events (allows multiple listeners)</li> <li>Event object: Contains information about the event (which key, mouse position, etc.)</li> <li>Key insight: Events make web pages interactive and responsive to user actions</li> </ul>"},{"location":"javascript/07-dom-and-events/#code-patterns","title":"Code Patterns","text":""},{"location":"javascript/07-dom-and-events/#dom-selection-and-manipulation","title":"DOM Selection and Manipulation","text":"<pre><code>// Selecting elements\nconst message = document.querySelector('.message');\nconst score = document.querySelector('.score');\nconst number = document.querySelector('.number');\nconst guess = document.querySelector('.guess');\nconst checkBtn = document.querySelector('.check');\n\n// Reading content (always returns strings)\nconsole.log(message.textContent); // Get text content - safer than innerHTML\nconsole.log(guess.value); // Get input value - always a string, convert if needed\n\n// Modifying content (immediate visual feedback)\nmessage.textContent = 'Correct Number!'; // Replaces all text content\nscore.textContent = 20; // Numbers are automatically converted to strings\nnumber.textContent = 13; // Updates what user sees on screen\n\n// Modifying styles (inline CSS - highest priority)\nmessage.style.color = '#60b347'; // Changes text color immediately\nnumber.style.width = '30rem'; // Dynamically resize elements\ndocument.querySelector('body').style.backgroundColor = '#60b347'; // Page-wide changes\n\n// Working with CSS classes (preferred method for styling)\nmessage.classList.add('success'); // Add a CSS class\nmessage.classList.remove('error'); // Remove a CSS class\nmessage.classList.toggle('highlight'); // Add if not present, remove if present\nmessage.classList.contains('success'); // Check if class exists - returns boolean\n</code></pre>"},{"location":"javascript/07-dom-and-events/#event-handling","title":"Event Handling","text":"<pre><code>// Basic event listener - anonymous function approach\ndocument.querySelector('.check').addEventListener('click', function () {\n  const guess = Number(document.querySelector('.guess').value); // Convert string to number\n  console.log(guess, typeof guess);\n\n  if (!guess) {\n    // Falsy values: 0, '', null, undefined, NaN\n    document.querySelector('.message').textContent = 'No number!';\n  }\n});\n\n// Event listener with named function - better for reusability and debugging\nfunction handleCheck() {\n  const guess = Number(document.querySelector('.guess').value);\n\n  if (!guess) {\n    document.querySelector('.message').textContent = 'No number!';\n  } else if (guess === secretNumber) {\n    // Use === for strict equality\n    document.querySelector('.message').textContent = 'Correct Number!';\n  } else if (guess &gt; secretNumber) {\n    document.querySelector('.message').textContent = 'Too high!';\n  } else if (guess &lt; secretNumber) {\n    document.querySelector('.message').textContent = 'Too low!';\n  }\n}\n\ndocument.querySelector('.check').addEventListener('click', handleCheck); // Pass function reference, not call\n\n// Keyboard events - listen to entire document for global key presses\ndocument.addEventListener('keydown', function (event) {\n  console.log(event.key); // Which key was pressed ('Enter', 'Escape', 'a', etc.)\n\n  if (event.key === 'Escape') {\n    // Check specific key\n    // Handle escape key - common pattern for closing modals\n    closeModal();\n  }\n});\n\n// Multiple event listeners\nconst btnAgain = document.querySelector('.again');\nbtnAgain.addEventListener('click', function () {\n  // Reset game logic\n  score = 20;\n  secretNumber = Math.trunc(Math.random() * 20) + 1;\n\n  document.querySelector('.message').textContent = 'Start guessing...';\n  document.querySelector('.score').textContent = score;\n  document.querySelector('.number').textContent = '?';\n  document.querySelector('.guess').value = '';\n\n  // Reset styles\n  document.querySelector('body').style.backgroundColor = '#222';\n  document.querySelector('.number').style.width = '15rem';\n});\n</code></pre>"},{"location":"javascript/07-dom-and-events/#complete-game-example-number-guessing-game","title":"Complete Game Example: Number Guessing Game","text":"<pre><code>// Game state\nlet secretNumber = Math.trunc(Math.random() * 20) + 1;\nlet score = 20;\nlet highscore = 0;\n\n// Helper function for displaying messages\nconst displayMessage = function (message) {\n  document.querySelector('.message').textContent = message;\n};\n\n// Check button event listener\ndocument.querySelector('.check').addEventListener('click', function () {\n  const guess = Number(document.querySelector('.guess').value);\n\n  // When there is no input\n  if (!guess) {\n    displayMessage('\u26d4 No number!');\n\n    // When player wins\n  } else if (guess === secretNumber) {\n    displayMessage('\ud83c\udf89 Correct Number!');\n    document.querySelector('.number').textContent = secretNumber;\n\n    document.querySelector('body').style.backgroundColor = '#60b347';\n    document.querySelector('.number').style.width = '30rem';\n\n    if (score &gt; highscore) {\n      highscore = score;\n      document.querySelector('.highscore').textContent = highscore;\n    }\n\n    // When guess is wrong\n  } else if (guess !== secretNumber) {\n    if (score &gt; 1) {\n      displayMessage(guess &gt; secretNumber ? '\ud83d\udcc8 Too high!' : '\ud83d\udcc9 Too low!');\n      score--;\n      document.querySelector('.score').textContent = score;\n    } else {\n      displayMessage('\ud83d\udca5 You lost the game!');\n      document.querySelector('.score').textContent = 0;\n    }\n  }\n});\n\n// Again button event listener\ndocument.querySelector('.again').addEventListener('click', function () {\n  score = 20;\n  secretNumber = Math.trunc(Math.random() * 20) + 1;\n\n  displayMessage('Start guessing...');\n  document.querySelector('.score').textContent = score;\n  document.querySelector('.number').textContent = '?';\n  document.querySelector('.guess').value = '';\n\n  document.querySelector('body').style.backgroundColor = '#222';\n  document.querySelector('.number').style.width = '15rem';\n});\n</code></pre>"},{"location":"javascript/07-dom-and-events/#modal-window-implementation","title":"Modal Window Implementation","text":"<pre><code>// Select elements\nconst modal = document.querySelector('.modal');\nconst overlay = document.querySelector('.overlay');\nconst btnCloseModal = document.querySelector('.close-modal');\nconst btnsOpenModal = document.querySelectorAll('.show-modal');\n\n// Functions\nconst openModal = function () {\n  modal.classList.remove('hidden');\n  overlay.classList.remove('hidden');\n};\n\nconst closeModal = function () {\n  modal.classList.add('hidden');\n  overlay.classList.add('hidden');\n};\n\n// Event listeners for opening modal\nfor (let i = 0; i &lt; btnsOpenModal.length; i++) {\n  btnsOpenModal[i].addEventListener('click', openModal);\n}\n\n// Event listeners for closing modal\nbtnCloseModal.addEventListener('click', closeModal);\noverlay.addEventListener('click', closeModal);\n\n// Close modal with Escape key\ndocument.addEventListener('keydown', function (event) {\n  if (event.key === 'Escape' &amp;&amp; !modal.classList.contains('hidden')) {\n    closeModal();\n  }\n});\n</code></pre>"},{"location":"javascript/07-dom-and-events/#pig-game-implementation-dice-game","title":"Pig Game Implementation (Dice Game)","text":"<pre><code>// Game elements\nconst player0El = document.querySelector('.player--0');\nconst player1El = document.querySelector('.player--1');\nconst score0El = document.querySelector('#score--0');\nconst score1El = document.querySelector('#score--1');\nconst current0El = document.querySelector('#current--0');\nconst current1El = document.querySelector('#current--1');\n\nconst diceEl = document.querySelector('.dice');\nconst btnNew = document.querySelector('.btn--new');\nconst btnRoll = document.querySelector('.btn--roll');\nconst btnHold = document.querySelector('.btn--hold');\n\n// Game state\nlet scores, currentScore, activePlayer, playing;\n\n// Initialize game\nconst init = function () {\n  scores = [0, 0];\n  currentScore = 0;\n  activePlayer = 0;\n  playing = true;\n\n  score0El.textContent = 0;\n  score1El.textContent = 0;\n  current0El.textContent = 0;\n  current1El.textContent = 0;\n\n  diceEl.classList.add('hidden');\n  player0El.classList.remove('player--winner');\n  player1El.classList.remove('player--winner');\n  player0El.classList.add('player--active');\n  player1El.classList.remove('player--active');\n};\n\n// Switch player function\nconst switchPlayer = function () {\n  document.querySelector(`#current--${activePlayer}`).textContent = 0;\n  currentScore = 0;\n  activePlayer = activePlayer === 0 ? 1 : 0;\n  player0El.classList.toggle('player--active');\n  player1El.classList.toggle('player--active');\n};\n\n// Roll dice functionality\nbtnRoll.addEventListener('click', function () {\n  if (playing) {\n    // Generate random dice roll\n    const dice = Math.trunc(Math.random() * 6) + 1;\n\n    // Display dice\n    diceEl.classList.remove('hidden');\n    diceEl.src = `dice-${dice}.png`;\n\n    // Check for rolled 1\n    if (dice !== 1) {\n      // Add dice to current score\n      currentScore += dice;\n      document.querySelector(`#current--${activePlayer}`).textContent =\n        currentScore;\n    } else {\n      // Switch to next player\n      switchPlayer();\n    }\n  }\n});\n\n// Hold functionality\nbtnHold.addEventListener('click', function () {\n  if (playing) {\n    // Add current score to active player's score\n    scores[activePlayer] += currentScore;\n    document.querySelector(`#score--${activePlayer}`).textContent =\n      scores[activePlayer];\n\n    // Check if player's score is &gt;= 100\n    if (scores[activePlayer] &gt;= 100) {\n      // Finish the game\n      playing = false;\n      diceEl.classList.add('hidden');\n\n      document\n        .querySelector(`.player--${activePlayer}`)\n        .classList.add('player--winner');\n      document\n        .querySelector(`.player--${activePlayer}`)\n        .classList.remove('player--active');\n    } else {\n      // Switch to the next player\n      switchPlayer();\n    }\n  }\n});\n\n// New game functionality\nbtnNew.addEventListener('click', init);\n\n// Initialize game on page load\ninit();\n</code></pre>"},{"location":"javascript/07-dom-and-events/#dom-manipulation-best-practices","title":"DOM Manipulation Best Practices","text":""},{"location":"javascript/07-dom-and-events/#performance-considerations","title":"Performance Considerations","text":"<pre><code>// Cache DOM selections\nconst scoreElement = document.querySelector('.score');\nconst messageElement = document.querySelector('.message');\n\n// Batch DOM updates\nfunction updateGameState(score, message, isWinner) {\n  scoreElement.textContent = score;\n  messageElement.textContent = message;\n\n  if (isWinner) {\n    document.body.classList.add('winner');\n  }\n}\n\n// Use DocumentFragment for multiple elements\nconst fragment = document.createDocumentFragment();\nfor (let i = 0; i &lt; 100; i++) {\n  const li = document.createElement('li');\n  li.textContent = `Item ${i}`;\n  fragment.appendChild(li);\n}\ndocument.querySelector('ul').appendChild(fragment);\n</code></pre>"},{"location":"javascript/07-dom-and-events/#event-delegation","title":"Event Delegation","text":"<pre><code>// Instead of adding listeners to each button\ndocument\n  .querySelector('.button-container')\n  .addEventListener('click', function (e) {\n    if (e.target.classList.contains('btn')) {\n      // Handle button click\n      console.log('Button clicked:', e.target.textContent);\n    }\n  });\n</code></pre>"},{"location":"javascript/07-dom-and-events/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>DOM manipulation is powerful but should be used thoughtfully</li> <li>Cache DOM selections to improve performance</li> <li>Use event delegation for dynamic content</li> <li>Separate logic from DOM manipulation for cleaner code</li> <li>Always check if elements exist before manipulating them</li> <li>Use semantic HTML to make DOM selection easier</li> </ol> <p>Master DOM manipulation to build interactive web applications! \ud83c\udfae</p>"},{"location":"javascript/08-behind-the-scenes/","title":"Section 8: How JavaScript Works Behind the Scenes","text":""},{"location":"javascript/08-behind-the-scenes/#key-concepts","title":"Key Concepts","text":"<ul> <li> <p>JavaScript Engine</p> </li> <li> <p>V8 (Chrome, Node.js), SpiderMonkey (Firefox), JavaScriptCore (Safari)</p> </li> <li>Call stack: Execution context stack (LIFO - Last In, First Out)</li> <li>Heap: Memory allocation for objects</li> <li>Compilation vs Interpretation: JS is interpreted and just-in-time compiled</li> <li> <p>Mental model: Think of the engine as a factory that processes your code line by line</p> </li> <li> <p>Execution Context</p> </li> <li> <p>Environment where JavaScript code is executed</p> </li> <li>Global Execution Context: Created for top-level code (the main \"room\" where code runs)</li> <li>Function Execution Context: Created for each function call (temporary \"rooms\" for functions)</li> <li>Contains: Variable Environment, Scope Chain, <code>this</code> keyword</li> <li> <p>Analogy: Like different rooms in a house, each with their own environment and access rules</p> </li> <li> <p>Hoisting</p> </li> <li> <p>Variables and function declarations are \"moved\" to the top</p> </li> <li>Function declarations: Fully hoisted (can call before declaration - like having a phone book)</li> <li>var variables: Hoisted but initialized with <code>undefined</code> (placeholder exists but empty)</li> <li>let/const: Hoisted but in \"temporal dead zone\" (exists but inaccessible until declaration)</li> <li>Function expressions/arrows: Not hoisted (treated as variables)</li> <li> <p>Why it matters: Understanding hoisting prevents bugs and explains unexpected behavior</p> </li> <li> <p>Scope and Scope Chain</p> </li> <li> <p>Global scope: Accessible everywhere (like public areas in a building)</p> </li> <li>Function scope: Accessible only within function (like private offices)</li> <li>Block scope: <code>let</code>/<code>const</code> are block-scoped, <code>var</code> is not (like locked rooms vs open doors)</li> <li>Scope chain: Inner scopes have access to outer scopes (like nested Russian dolls)</li> <li> <p>Key rule: Variables look \"outward\" for access, never \"inward\"</p> </li> <li> <p>The <code>this</code> Keyword</p> </li> <li>Refers to the object that is executing the current function</li> <li>Method: <code>this</code> = object calling the method (the owner of the method)</li> <li>Simple function call: <code>this</code> = undefined (strict mode) / window (non-strict)</li> <li>Arrow functions: <code>this</code> = lexical <code>this</code> (inherits from parent scope - like a chameleon)</li> <li>Event listeners: <code>this</code> = DOM element (the element that triggered the event)</li> <li>Remember: <code>this</code> is determined by HOW a function is called, not WHERE it's defined</li> </ul>"},{"location":"javascript/08-behind-the-scenes/#code-patterns","title":"Code Patterns","text":""},{"location":"javascript/08-behind-the-scenes/#hoisting-examples","title":"Hoisting Examples","text":"<pre><code>// Function hoisting\nconsole.log(addDeclaration(2, 3)); // Works! Returns 5\n\nfunction addDeclaration(a, b) {\n  return a + b;\n}\n\n// Variable hoisting\nconsole.log(me); // undefined (not error!)\nconsole.log(job); // ReferenceError: Cannot access 'job' before initialization\n// Variable hoisting demonstration\nconsole.log(me); // undefined (var is hoisted but not initialized)\nconsole.log(job); // ReferenceError: Cannot access 'job' before initialization\nconsole.log(year); // ReferenceError: Cannot access 'year' before initialization\n\nvar me = 'Jonas'; // var: hoisted with undefined value\nlet job = 'teacher'; // let: hoisted but in temporal dead zone\nconst year = 1991; // const: hoisted but in temporal dead zone\n\n// Function expressions and hoisting (treated like variables)\nconsole.log(addExpression); // undefined (var is hoisted)\nconsole.log(addExpression(2, 3)); // TypeError: addExpression is not a function\n\nvar addExpression = function (a, b) {\n  return a + b;\n}; // Function expression: not hoisted like function declarations\n\n// Arrow functions and hoisting (same as function expressions)\nconsole.log(addArrow); // ReferenceError: Cannot access 'addArrow' before initialization\n\nconst addArrow = (a, b) =&gt; a + b; // Arrow function: follows const hoisting rules\n\n// Hoisting gotcha - why var can be dangerous\nif (!numProducts) deleteShoppingCart(); // This will run because numProducts is undefined!\n// numProducts is hoisted as undefined, so !undefined = true\n\nvar numProducts = 10;\n\nfunction deleteShoppingCart() {\n  console.log('All products deleted!');\n}\n</code></pre>"},{"location":"javascript/08-behind-the-scenes/#scope-chain-examples","title":"Scope Chain Examples","text":"<pre><code>// Global scope\nconst myName = 'Jonas';\n\nfunction first() {\n  // Function scope\n  const age = 30;\n\n  if (age &gt;= 30) {\n    // Block scope\n    const decade = 3;\n    var millenial = true;\n  }\n\n  function second() {\n    // Function scope (nested)\n    const job = 'teacher';\n\n    // Scope chain in action\n    console.log(`${myName} is a ${age}-year old ${job}`); // Works!\n  }\n\n  second();\n\n  // console.log(job); // ReferenceError: job is not defined\n  console.log(millenial); // Works! var is function-scoped\n  // console.log(decade); // ReferenceError: decade is not defined\n}\n\nfirst();\n\n// Variable lookup in scope chain\nfunction calcAge(birthYear) {\n  const age = 2037 - birthYear;\n\n  function printAge() {\n    let output = `${firstName}, you are ${age}, born in ${birthYear}`;\n    console.log(output);\n\n    if (birthYear &gt;= 1981 &amp;&amp; birthYear &lt;= 1996) {\n      var millenial = true;\n\n      // Creating NEW variable with same name as outer scope's variable\n      const firstName = 'Steven';\n\n      // Reassigning outer scope's variable\n      output = 'NEW OUTPUT!';\n\n      const str = `Oh, and you're a millenial, ${firstName}`;\n      console.log(str);\n\n      function add(a, b) {\n        return a + b;\n      }\n    }\n\n    console.log(millenial); // Works! var is function-scoped\n    // console.log(str); // ReferenceError: str is not defined\n    console.log(output); // \"NEW OUTPUT!\"\n  }\n\n  printAge();\n  return age;\n}\n\nconst firstName = 'Jonas';\ncalcAge(1991);\n</code></pre>"},{"location":"javascript/08-behind-the-scenes/#the-this-keyword","title":"The <code>this</code> Keyword","text":"<pre><code>// Global this - in the global scope\nconsole.log(this); // Window object (in browser) - the global object\n\n// Function this - regular function call\nconst calcAge = function (birthYear) {\n  console.log(2037 - birthYear);\n  console.log(this); // undefined (strict mode) - no owner object\n};\ncalcAge(1991); // Called as a regular function, not a method\n\n// Arrow function this (lexical this) - inherits from parent scope\nconst calcAgeArrow = (birthYear) =&gt; {\n  console.log(2037 - birthYear);\n  console.log(this); // Window object (parent scope) - arrow functions don't have their own this\n};\ncalcAgeArrow(1980); // Arrow function inherits this from surrounding context\n\n// Method this - function called as a method of an object\nconst jonas = {\n  year: 1991,\n  calcAge: function () {\n    console.log(this); // jonas object - the object that called the method\n    console.log(2037 - this.year); // Access properties of the calling object\n  },\n};\njonas.calcAge(); // Called as jonas.calcAge(), so this = jonas\n\n// Method borrowing - same function, different this\nconst matilda = {\n  year: 2017,\n};\n\nmatilda.calcAge = jonas.calcAge; // Copy the function to matilda\nmatilda.calcAge(); // Now this = matilda object (different owner!)\n// Key point: this is determined by WHO calls the function, not where it's defined\n\n// Function call\nconst f = jonas.calcAge;\nf(); // this = undefined\n\n// this in event listeners\ndocument.querySelector('.btn').addEventListener('click', function () {\n  console.log(this); // DOM element that triggered the event\n  this.style.backgroundColor = 'red';\n});\n\n// Arrow functions don't get their own this\nconst jonas2 = {\n  firstName: 'Jonas',\n  year: 1991,\n  calcAge: function () {\n    console.log(this); // jonas2 object\n\n    // Solution 1: Store this in variable\n    const self = this;\n    const isMillenial = function () {\n      console.log(self.year &gt;= 1981 &amp;&amp; self.year &lt;= 1996);\n    };\n\n    // Solution 2: Use arrow function\n    const isMillenial2 = () =&gt; {\n      console.log(this.year &gt;= 1981 &amp;&amp; this.year &lt;= 1996); // Works!\n    };\n\n    isMillenial();\n    isMillenial2();\n  },\n\n  // Never use arrow function as method!\n  greet: () =&gt; {\n    console.log(`Hey ${this.firstName}`); // undefined! this = window\n  },\n};\n\njonas2.greet(); // Hey undefined\njonas2.calcAge();\n</code></pre>"},{"location":"javascript/08-behind-the-scenes/#primitives-vs-objects-reference-types","title":"Primitives vs Objects (Reference Types)","text":"<pre><code>// Primitives\nlet lastName = 'Williams';\nlet oldLastName = lastName;\nlastName = 'Davis';\n\nconsole.log(lastName, oldLastName); // Davis Williams\n\n// Objects\nconst jessica = {\n  firstName: 'Jessica',\n  lastName: 'Williams',\n  age: 27,\n};\n\nconst marriedJessica = jessica; // Same reference!\nmarriedJessica.lastName = 'Davis';\n\nconsole.log('Before marriage:', jessica); // lastName is 'Davis'!\nconsole.log('After marriage:', marriedJessica);\n\n// marriedJessica = {}; // TypeError: Assignment to constant variable\n\n// Copying objects\nconst jessica2 = {\n  firstName: 'Jessica',\n  lastName: 'Williams',\n  age: 27,\n  family: ['Alice', 'Bob'],\n};\n\n// Shallow copy\nconst jessicaCopy = Object.assign({}, jessica2);\njessicaCopy.lastName = 'Davis';\n\nconsole.log('Before marriage:', jessica2); // lastName still 'Williams'\nconsole.log('After marriage:', jessicaCopy); // lastName is 'Davis'\n\n// But nested objects are still referenced!\njessicaCopy.family.push('Mary');\nconsole.log('Before marriage:', jessica2.family); // ['Alice', 'Bob', 'Mary']\nconsole.log('After marriage:', jessicaCopy.family); // ['Alice', 'Bob', 'Mary']\n\n// Deep clone (for nested objects)\nconst jessicaDeepCopy = JSON.parse(JSON.stringify(jessica2));\n// Note: This doesn't work with functions, undefined, Symbol, etc.\n</code></pre>"},{"location":"javascript/08-behind-the-scenes/#call-stack-visualization","title":"Call Stack Visualization","text":"<pre><code>// Example to understand call stack\nconst a = 'Hello!';\nfirst();\n\nfunction first() {\n  console.log('Inside first function');\n  second();\n  console.log('Back in first function');\n}\n\nfunction second() {\n  console.log('Inside second function');\n  third();\n  console.log('Back in second function');\n}\n\nfunction third() {\n  console.log('Inside third function');\n  console.log(a); // Variable lookup through scope chain\n  console.log('End of third function');\n}\n\n// Call stack execution order:\n// 1. Global Execution Context\n// 2. first() execution context\n// 3. second() execution context\n// 4. third() execution context\n// Then unwinding: third() -&gt; second() -&gt; first() -&gt; global\n</code></pre>"},{"location":"javascript/08-behind-the-scenes/#understanding-execution-context","title":"Understanding Execution Context","text":"<pre><code>// Example demonstrating execution context creation\nvar x = 1;\na();\nb();\nconsole.log(x);\n\nfunction a() {\n  var x = 10;\n  console.log(x);\n}\n\nfunction b() {\n  var x = 100;\n  console.log(x);\n}\n\n// Execution:\n// 1. Global EC: x = 1 (hoisted)\n// 2. a() EC: x = 10 (new execution context)\n// 3. b() EC: x = 100 (new execution context)\n// 4. Back to Global EC: x = 1\n\n// Variable Environment example\nfunction outer() {\n  var a = 1;\n\n  function inner() {\n    var b = 2;\n    console.log(a + b); // 3 (can access outer scope)\n  }\n\n  inner();\n  // console.log(b); // ReferenceError: b is not defined\n}\n\nouter();\n</code></pre>"},{"location":"javascript/08-behind-the-scenes/#advanced-concepts","title":"Advanced Concepts","text":""},{"location":"javascript/08-behind-the-scenes/#temporal-dead-zone","title":"Temporal Dead Zone","text":"<pre><code>// Temporal Dead Zone for let/const\nconsole.log(me); // undefined\n// console.log(job); // ReferenceError: Cannot access before initialization\n// console.log(year); // ReferenceError: Cannot access before initialization\n\nvar me = 'Jonas';\nlet job = 'teacher';\nconst year = 1991;\n\n// Function in TDZ\n// console.log(addExpression(2, 3)); // TypeError: Cannot read property of undefined\n// console.log(addArrow(2, 3)); // ReferenceError: Cannot access before initialization\n\nvar addExpression = function (a, b) {\n  return a + b;\n};\n\nconst addArrow = (a, b) =&gt; a + b;\n\n// Best practice: Declare variables at the top\nfunction bestPractice() {\n  // All declarations at top\n  let x, y, z;\n  const PI = 3.14159;\n\n  // Then use them\n  x = 10;\n  y = 20;\n  z = x + y;\n\n  return z * PI;\n}\n</code></pre>"},{"location":"javascript/08-behind-the-scenes/#memory-management","title":"Memory Management","text":"<pre><code>// Understanding memory allocation\nfunction createObjects() {\n  // These objects will be created in the heap\n  const obj1 = { name: 'Object 1' };\n  const obj2 = { name: 'Object 2', ref: obj1 };\n\n  return obj2;\n}\n\nlet result = createObjects();\n// obj1 is still accessible through obj2.ref\n// Both objects remain in memory\n\nresult = null;\n// Now both objects can be garbage collected\n\n// Memory leak example (avoid this!)\nfunction memoryLeak() {\n  const element = document.getElementById('button');\n\n  element.addEventListener('click', function () {\n    // This creates a closure that keeps 'element' in memory\n    console.log('Button clicked');\n  });\n\n  // Even if element is removed from DOM, it stays in memory\n  // due to the event listener closure\n}\n</code></pre>"},{"location":"javascript/08-behind-the-scenes/#debugging-behind-the-scenes","title":"Debugging Behind the Scenes","text":"<pre><code>// Understanding the call stack in DevTools\nfunction buggyFunction() {\n  console.trace('Call stack trace'); // Shows call stack\n  debugger; // Pauses execution in DevTools\n\n  const result = someCalculation();\n  return result;\n}\n\nfunction someCalculation() {\n  const a = 10;\n  const b = 0;\n  return a / b; // Infinity - potential bug\n}\n\n// Using console.log to understand execution\nfunction demonstrateExecution() {\n  console.log('1. Function starts');\n\n  setTimeout(() =&gt; {\n    console.log('3. Timeout callback (async)');\n  }, 0);\n\n  console.log('2. Function ends');\n}\n\ndemonstrateExecution();\n// Output: 1, 2, 3 (demonstrates async nature)\n</code></pre>"},{"location":"javascript/08-behind-the-scenes/#best-practices","title":"Best Practices","text":"<ol> <li>Always use strict mode: <code>'use strict';</code></li> <li>Prefer <code>const</code> and <code>let</code> over <code>var</code></li> <li>Declare variables at the top of their scope</li> <li>Use function declarations for hoisting benefits when needed</li> <li>Understand <code>this</code> context before using it</li> <li>Be careful with arrow functions as methods</li> <li>Avoid creating global variables accidentally</li> </ol>"},{"location":"javascript/08-behind-the-scenes/#common-mistakes","title":"Common Mistakes","text":"<pre><code>// Mistake 1: Accidental globals\nfunction oops() {\n  // Forgot var/let/const - creates global variable!\n  accidentalGlobal = 'I am global now!';\n}\n\n// Mistake 2: this in arrow functions\nconst obj = {\n  name: 'Test',\n  getName: () =&gt; {\n    return this.name; // undefined! Arrow function doesn't have its own 'this'\n  },\n};\n\n// Mistake 3: Temporal Dead Zone\nfunction mistake() {\n  console.log(x); // ReferenceError\n  let x = 5;\n}\n\n// Mistake 4: Variable shadowing confusion\nlet x = 1;\nfunction shadow() {\n  console.log(x); // ReferenceError: Cannot access 'x' before initialization\n  let x = 2; // This shadows the outer x, but it's not yet initialized\n}\n</code></pre> <p>Understanding these concepts makes you a much better JavaScript developer! \ud83e\udde0</p>"},{"location":"javascript/09-data-structures-operators/","title":"Section 9: Data Structures, Modern Operators and Strings","text":""},{"location":"javascript/09-data-structures-operators/#key-concepts","title":"Key Concepts","text":"<ul> <li> <p>Destructuring Assignment</p> </li> <li> <p>Extract values from arrays and objects into variables</p> </li> <li>Array destructuring: <code>const [a, b] = array</code></li> <li>Object destructuring: <code>const {name, age} = object</code></li> <li>Default values, variable renaming, nested destructuring</li> <li>Swapping variables, function parameters</li> <li> <p>Why useful: Cleaner code, less repetition, easier data extraction from complex structures</p> </li> <li> <p>Spread Operator (...)</p> </li> <li> <p>Expands arrays/objects into individual elements</p> </li> <li>Array spreading: <code>[...array1, ...array2]</code></li> <li>Object spreading: <code>{...obj1, ...obj2}</code></li> <li>Function arguments, copying arrays/objects</li> <li>Since ES2018: works with objects too</li> <li> <p>Mental model: Like unpacking a suitcase - takes everything out and spreads it</p> </li> <li> <p>Rest Pattern (...)</p> </li> <li> <p>Collects multiple elements into an array/object</p> </li> <li>Rest in destructuring: <code>const [a, ...others] = array</code></li> <li>Rest parameters: <code>function(...args)</code></li> <li>Always last element, opposite of spread</li> <li> <p>Memory trick: REST = collect the REST of the elements</p> </li> <li> <p>Short-Circuiting (&amp;&amp; and ||)</p> </li> <li> <p>OR (||): Returns first truthy value or last value (great for default values)</p> </li> <li>AND (&amp;&amp;): Returns first falsy value or last value (perfect for conditional execution)</li> <li>Nullish Coalescing (??): Only null/undefined are falsy (more precise than ||)</li> <li>Useful for default values and conditional execution</li> <li> <p>Performance benefit: Stops evaluating as soon as result is determined</p> </li> <li> <p>Sets and Maps</p> </li> <li>Set: Collection of unique values (like a bag that automatically removes duplicates)</li> <li>Map: Key-value pairs with any data type as keys (more flexible than objects)</li> <li>Methods: add, delete, has, clear, size</li> <li>Iteration with for-of loops</li> <li>When to use: Sets for uniqueness, Maps when you need non-string keys or ordered data</li> </ul>"},{"location":"javascript/09-data-structures-operators/#code-patterns","title":"Code Patterns","text":""},{"location":"javascript/09-data-structures-operators/#destructuring-arrays","title":"Destructuring Arrays","text":"<pre><code>// Basic array destructuring - extract values by position\nconst arr = [2, 3, 4];\nconst [x, y, z] = arr; // x gets first, y gets second, z gets third\nconsole.log(x, y, z); // 2, 3, 4\n\n// Skipping elements - use empty space for elements you don't need\nconst [first, , third] = arr; // Skip the middle element\nconsole.log(first, third); // 2, 4\n\n// Default values - fallback if array doesn't have enough elements\nconst [p = 1, q = 1, r = 1] = [8, 9]; // r gets default value since only 2 elements\nconsole.log(p, q, r); // 8, 9, 1\n\n// Switching variables - elegant way to swap values\nlet [main, secondary] = ['Italian', 'Spanish'];\n[main, secondary] = [secondary, main]; // No temp variable needed!\nconsole.log(main, secondary); // Spanish, Italian\n\n// Nested destructuring - destructure arrays inside arrays\nconst nested = [2, 4, [5, 6]];\nconst [i, , [j, k]] = nested; // Go deeper into the nested array\nconsole.log(i, j, k); // 2, 5, 6\n\n// Restaurant example\nconst restaurant = {\n  name: 'Classico Italiano',\n  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],\n  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread'],\n  mainMenu: ['Pizza', 'Pasta', 'Risotto'],\n\n  order: function (starterIndex, mainIndex) {\n    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];\n  },\n};\n\n// Destructuring function return\nconst [starter, mainCourse] = restaurant.order(2, 0);\nconsole.log(starter, mainCourse); // Garlic Bread, Pizza\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#destructuring-objects","title":"Destructuring Objects","text":"<pre><code>// Basic object destructuring\nconst { name, categories, openingHours } = restaurant;\nconsole.log(name, categories, openingHours);\n\n// Variable renaming\nconst { name: restaurantName, categories: tags } = restaurant;\nconsole.log(restaurantName, tags);\n\n// Default values\nconst { menu = [], starterMenu: starters = [] } = restaurant;\nconsole.log(menu, starters);\n\n// Mutating variables\nlet a = 111;\nlet b = 999;\nconst obj = { a: 23, b: 7, c: 14 };\n({ a, b } = obj); // Need parentheses!\nconsole.log(a, b); // 23, 7\n\n// Nested objects\nconst restaurant2 = {\n  openingHours: {\n    thu: { open: 12, close: 22 },\n    fri: { open: 11, close: 23 },\n    sat: { open: 0, close: 24 },\n  },\n};\n\nconst {\n  fri: { open: o, close: c },\n} = restaurant2.openingHours;\nconsole.log(o, c); // 11, 23\n\n// Function parameters\nconst orderDelivery = function ({\n  starterIndex = 1,\n  mainIndex = 0,\n  time = '20:00',\n  address,\n}) {\n  console.log(\n    `Order received! ${starterIndex}, ${mainIndex}, ${time}, ${address}`\n  );\n};\n\nrestaurant.orderDelivery({\n  time: '22:30',\n  address: 'Via del Sole, 21',\n  mainIndex: 2,\n  starterIndex: 2,\n});\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#spread-operator","title":"Spread Operator","text":"<pre><code>// Array spreading - unpack array elements\nconst arr = [7, 8, 9];\nconst badNewArr = [1, 2, arr[0], arr[1], arr[2]]; // Manual way (tedious!)\nconst newArr = [1, 2, ...arr]; // Spread operator - much cleaner!\nconsole.log(newArr); // [1, 2, 7, 8, 9]\n\n// Copying arrays - creates a shallow copy, not a reference\nconst mainMenuCopy = [...restaurant.mainMenu]; // Safe to modify without affecting original\n\n// Joining arrays - combine multiple arrays elegantly\nconst menu = [...restaurant.starterMenu, ...restaurant.mainMenu];\nconsole.log(menu); // All menu items in one array\n\n// Iterables: arrays, strings, maps, sets. NOT objects (until ES2018)\nconst str = 'Jonas';\nconst letters = [...str, ' ', 'S.']; // Spread string into individual characters\nconsole.log(letters); // ['J', 'o', 'n', 'a', 's', ' ', 'S.']\n\n// Real-world example: function arguments (spread array into parameters)\nconst ingredients = [\n  prompt(\"Let's make pasta! Ingredient 1?\"),\n  prompt('Ingredient 2?'),\n  prompt('Ingredient 3'),\n];\n\nrestaurant.orderPasta(...ingredients);\n\n// Objects (ES2018)\nconst newRestaurant = {\n  foundedIn: 1998,\n  ...restaurant,\n  founder: 'Giuseppe',\n};\n\n// Shallow copy of objects\nconst restaurantCopy = { ...restaurant };\nrestaurantCopy.name = 'Ristorante Roma';\nconsole.log(restaurantCopy.name); // 'Ristorante Roma'\nconsole.log(restaurant.name); // 'Classico Italiano' (unchanged)\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#rest-pattern","title":"Rest Pattern","text":"<pre><code>// Rest in destructuring\nconst [a, b, ...others] = [1, 2, 3, 4, 5];\nconsole.log(a, b, others); // 1, 2, [3, 4, 5]\n\n// Rest with skipping\nconst [pizza, , risotto, ...otherFood] = [\n  ...restaurant.mainMenu,\n  ...restaurant.starterMenu,\n];\nconsole.log(pizza, risotto, otherFood);\n\n// Rest in objects (collect remaining properties)\nconst { sat, ...weekdays } = restaurant.openingHours;\nconsole.log(weekdays); // All days except Saturday\n\n// Rest parameters in functions (variable number of arguments)\nconst add = function (...numbers) {\n  // Collect all arguments into an array\n  let sum = 0;\n  for (let i = 0; i &lt; numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\nconsole.log(add(2, 3)); // 5 - works with any number of arguments\nconsole.log(add(5, 3, 7, 2)); // 17\nconsole.log(add(8, 2, 5, 3, 2, 1, 4)); // 25\n\n// Using spread with rest parameters (spread array into individual arguments)\nconst x = [23, 5, 7];\nconsole.log(add(...x)); // 35 - spread array elements as separate arguments\n\n// Restaurant order function with rest (first parameter + collect the rest)\nrestaurant.orderPizza = function (mainIngredient, ...otherIngredients) {\n  console.log(mainIngredient); // First argument\n  console.log(otherIngredients); // Array of remaining arguments\n};\n\nrestaurant.orderPizza('mushrooms', 'onion', 'olives', 'spinach');\n// mushrooms\n// ['onion', 'olives', 'spinach']\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#short-circuiting","title":"Short-Circuiting","text":"<pre><code>// OR operator (||) - returns first TRUTHY value or last value\nconsole.log(3 || 'Jonas'); // 3 (first truthy value)\nconsole.log('' || 'Jonas'); // 'Jonas' (empty string is falsy)\nconsole.log(true || 0); // true (already truthy, stops here)\nconsole.log(undefined || null); // null (both falsy, returns last)\n\n// Practical use: default values (but watch out for 0!)\nrestaurant.numGuests = 0;\nconst guests1 = restaurant.numGuests ? restaurant.numGuests : 10; // Traditional ternary\nconst guests2 = restaurant.numGuests || 10; // Short-circuit OR\nconsole.log(guests1, guests2); // 0, 10 (problematic! 0 is falsy but valid number)\n\n// AND operator (&amp;&amp;) - returns first FALSY value or last value\nconsole.log(0 &amp;&amp; 'Jonas'); // 0 (first falsy value, stops here)\nconsole.log(7 &amp;&amp; 'Jonas'); // 'Jonas' (all truthy, returns last)\nconsole.log('Hello' &amp;&amp; 23 &amp;&amp; null &amp;&amp; 'jonas'); // null (first falsy value)\n\n// Practical use: conditional execution (cleaner than if statements)\nif (restaurant.orderPizza) {\n  // Traditional way\n  restaurant.orderPizza('mushrooms', 'spinach');\n}\n\nrestaurant.orderPizza &amp;&amp; restaurant.orderPizza('mushrooms', 'spinach'); // Short-circuit way\n// Only calls the function if it exists (truthy)\n\n// Nullish coalescing operator (??) - ES2020 - solves the || problem with 0 and ''\nrestaurant.numGuests = 0;\nconst guests3 = restaurant.numGuests ?? 10; // Only triggers for null/undefined\nconsole.log(guests3); // 0 (correct! 0 is not nullish)\n\n// Only null and undefined are falsy for ?? (more precise than ||)\nconsole.log(null ?? 'default'); // 'default' (null is nullish)\nconsole.log(undefined ?? 'default'); // 'default' (undefined is nullish)\nconsole.log(0 ?? 'default'); // 0 (0 is NOT nullish)\nconsole.log('' ?? 'default'); // '' (empty string is NOT nullish)\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#logical-assignment-operators-es2021","title":"Logical Assignment Operators (ES2021)","text":"<pre><code>const rest1 = {\n  name: 'Capri',\n  numGuests: 0, // This is a valid value, not missing!\n};\n\nconst rest2 = {\n  name: 'La Piazza',\n  owner: 'Giovanni Rossi',\n  // numGuests is missing (undefined)\n};\n\n// OR assignment operator (||=) - assigns if current value is falsy\nrest1.numGuests = rest1.numGuests || 10; // Problem: 0 becomes 10!\nrest2.numGuests = rest2.numGuests || 10; // Good: undefined becomes 10\n\n// Same as:\nrest1.numGuests ||= 10;\nrest2.numGuests ||= 10;\n\n// Nullish assignment operator (??=)\nrest1.numGuests ??= 10; // Better for 0 values\nrest2.numGuests ??= 10;\n\n// AND assignment operator (&amp;&amp;=)\nrest1.owner = rest1.owner &amp;&amp; '&lt;ANONYMOUS&gt;';\nrest2.owner = rest2.owner &amp;&amp; '&lt;ANONYMOUS&gt;';\n\n// Same as:\nrest1.owner &amp;&amp;= '&lt;ANONYMOUS&gt;';\nrest2.owner &amp;&amp;= '&lt;ANONYMOUS&gt;';\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#for-of-loop","title":"For-of Loop","text":"<pre><code>const menu = [...restaurant.starterMenu, ...restaurant.mainMenu];\n\n// Basic for-of\nfor (const item of menu) console.log(item);\n\n// Getting index\nfor (const [i, el] of menu.entries()) {\n  console.log(`${i + 1}: ${el}`);\n}\n\n// entries() returns array of [index, element]\nconsole.log([...menu.entries()]);\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#enhanced-object-literals-es6","title":"Enhanced Object Literals (ES6)","text":"<pre><code>const weekdays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n\nconst openingHours = {\n  [weekdays[3]]: {\n    // Computed property names\n    open: 12,\n    close: 22,\n  },\n  [weekdays[4]]: {\n    open: 11,\n    close: 23,\n  },\n  [weekdays[5]]: {\n    open: 0, // Open 24 hours\n    close: 24,\n  },\n};\n\nconst restaurant3 = {\n  name: 'Classico Italiano',\n\n  // ES6 enhanced object literals\n  openingHours, // Same as openingHours: openingHours\n\n  // Method shorthand\n  order(starterIndex, mainIndex) {\n    // Instead of order: function()\n    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];\n  },\n};\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#optional-chaining-es2020","title":"Optional Chaining (?.) - ES2020","text":"<pre><code>// Without optional chaining\nif (restaurant.openingHours &amp;&amp; restaurant.openingHours.mon) {\n  console.log(restaurant.openingHours.mon.open);\n}\n\n// With optional chaining\nconsole.log(restaurant.openingHours.mon?.open);\nconsole.log(restaurant.openingHours?.mon?.open);\n\n// Multiple optional chaining\nconst days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n\nfor (const day of days) {\n  const open = restaurant.openingHours[day]?.open ?? 'closed';\n  console.log(`On ${day}, we open at ${open}`);\n}\n\n// Methods\nconsole.log(restaurant.order?.(0, 1) ?? 'Method does not exist');\nconsole.log(restaurant.orderRisotto?.(0, 1) ?? 'Method does not exist');\n\n// Arrays\nconst users = [{ name: 'Jonas', email: 'hello@jonas.io' }];\n\nconsole.log(users[0]?.name ?? 'User array empty');\nconsole.log(users[2]?.name ?? 'User does not exist');\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#sets","title":"Sets","text":"<pre><code>// Creating sets\nconst ordersSet = new Set([\n  'Pasta',\n  'Pizza',\n  'Pizza',\n  'Risotto',\n  'Pasta',\n  'Pizza',\n]);\n\nconsole.log(ordersSet); // Set(3) {\"Pasta\", \"Pizza\", \"Risotto\"}\nconsole.log(new Set('Jonas')); // Set(5) {\"J\", \"o\", \"n\", \"a\", \"s\"}\n\n// Set methods and properties\nconsole.log(ordersSet.size); // 3\nconsole.log(ordersSet.has('Pizza')); // true\nconsole.log(ordersSet.has('Bread')); // false\n\nordersSet.add('Garlic Bread');\nordersSet.add('Garlic Bread'); // Won't be added (duplicate)\nordersSet.delete('Risotto');\nconsole.log(ordersSet);\n\n// Iterating sets\nfor (const order of ordersSet) console.log(order);\n\n// Use case: Remove duplicates from arrays\nconst staff = ['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter'];\nconst staffUnique = [...new Set(staff)];\nconsole.log(staffUnique);\n\n// Count unique letters\nconsole.log(new Set('jonasschmedtmann').size); // 11\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#maps","title":"Maps","text":"<pre><code>// Creating maps\nconst rest = new Map();\nrest.set('name', 'Classico Italiano');\nrest.set(1, 'Firenze, Italy');\nrest.set(2, 'Lisbon, Portugal');\n\n// Chaining set methods\nrest\n  .set('categories', ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'])\n  .set('open', 11)\n  .set('close', 23)\n  .set(true, 'We are open :D')\n  .set(false, 'We are closed :(');\n\n// Getting values\nconsole.log(rest.get('name')); // 'Classico Italiano'\nconsole.log(rest.get(true)); // 'We are open :D'\nconsole.log(rest.get(1)); // 'Firenze, Italy'\n\n// Clever use of boolean keys\nconst time = 21;\nconsole.log(rest.get(time &gt; rest.get('open') &amp;&amp; time &lt; rest.get('close')));\n\n// Map methods\nconsole.log(rest.has('categories')); // true\nrest.delete(2);\nconsole.log(rest.size); // 7\nrest.clear();\n\n// Maps with arrays/objects as keys\nconst arr = [1, 2];\nrest.set(arr, 'Test');\nrest.set(document.querySelector('h1'), 'Heading');\n\nconsole.log(rest.get(arr)); // 'Test'\n\n// Converting objects to maps\nconst hoursMap = new Map(Object.entries(openingHours));\nconsole.log(hoursMap);\n\n// Converting maps to arrays\nconsole.log([...hoursMap]);\nconsole.log([...hoursMap.keys()]);\nconsole.log([...hoursMap.values()]);\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#working-with-strings","title":"Working with Strings","text":"<pre><code>const airline = 'TAP Air Portugal';\nconst plane = 'A320';\n\n// Getting characters\nconsole.log(plane[0]); // 'A'\nconsole.log(plane[1]); // '3'\nconsole.log(plane[2]); // '2'\nconsole.log('B737'[0]); // 'B'\n\n// String length\nconsole.log(airline.length); // 16\nconsole.log('B737'.length); // 4\n\n// String methods\nconsole.log(airline.indexOf('r')); // 6\nconsole.log(airline.lastIndexOf('r')); // 10\nconsole.log(airline.indexOf('portugal')); // -1 (case sensitive)\n\n// Slice method\nconsole.log(airline.slice(4)); // 'Air Portugal'\nconsole.log(airline.slice(4, 7)); // 'Air'\n\nconsole.log(airline.slice(0, airline.indexOf(' '))); // 'TAP'\nconsole.log(airline.slice(airline.lastIndexOf(' ') + 1)); // 'Portugal'\n\nconsole.log(airline.slice(-2)); // 'al'\nconsole.log(airline.slice(1, -1)); // 'AP Air Portuga'\n\n// Practical functions\nconst checkMiddleSeat = function (seat) {\n  // B and E are middle seats\n  const s = seat.slice(-1);\n  if (s === 'B' || s === 'E') {\n    console.log('You got the middle seat \ud83d\ude2c');\n  } else {\n    console.log('You got lucky \ud83d\ude0e');\n  }\n};\n\ncheckMiddleSeat('11B'); // middle seat\ncheckMiddleSeat('23C'); // lucky\ncheckMiddleSeat('3E'); // middle seat\n\n// Case conversion\nconsole.log(airline.toLowerCase()); // 'tap air portugal'\nconsole.log(airline.toUpperCase()); // 'TAP AIR PORTUGAL'\n\n// Fix capitalization\nconst passenger = 'jOnAS'; // Should be 'Jonas'\nconst passengerLower = passenger.toLowerCase();\nconst passengerCorrect =\n  passengerLower[0].toUpperCase() + passengerLower.slice(1);\nconsole.log(passengerCorrect); // 'Jonas'\n\n// Comparing emails\nconst email = 'hello@jonas.io';\nconst loginEmail = '  Hello@Jonas.Io \\n';\n\nconst lowerEmail = loginEmail.toLowerCase();\nconst trimmedEmail = lowerEmail.trim(); // Also trimStart(), trimEnd()\nconsole.log(trimmedEmail); // 'hello@jonas.io'\n\nconst normalizedEmail = loginEmail.toLowerCase().trim();\nconsole.log(normalizedEmail === email); // true\n\n// Replacing parts of strings\nconst priceGB = '288,97\u00a3';\nconst priceUS = priceGB.replace('\u00a3', '$').replace(',', '.');\nconsole.log(priceUS); // '288.97$'\n\nconst announcement =\n  'All passengers come to boarding door 23. Boarding door 23!';\nconsole.log(announcement.replace('door', 'gate')); // Only first occurrence\nconsole.log(announcement.replaceAll('door', 'gate')); // All occurrences\n\n// Regular expressions\nconsole.log(announcement.replace(/door/g, 'gate')); // Global flag\n\n// Boolean methods\nconst plane2 = 'Airbus A320neo';\nconsole.log(plane2.includes('A320')); // true\nconsole.log(plane2.includes('Boeing')); // false\nconsole.log(plane2.startsWith('Airb')); // true\nconsole.log(plane2.endsWith('neo')); // true\n\n// Practical example\nif (plane2.startsWith('Airbus') &amp;&amp; plane2.endsWith('neo')) {\n  console.log('Part of the NEW Airbus family');\n}\n\n// Split and join\nconsole.log('a+very+nice+string'.split('+')); // ['a', 'very', 'nice', 'string']\nconsole.log('Jonas Schmedtmann'.split(' ')); // ['Jonas', 'Schmedtmann']\n\nconst [firstName, lastName] = 'Jonas Schmedtmann'.split(' ');\n\nconst newName = ['Mr.', firstName, lastName.toUpperCase()].join(' ');\nconsole.log(newName); // 'Mr. Jonas SCHMEDTMANN'\n\n// Capitalize names\nconst capitalizeName = function (name) {\n  const names = name.split(' ');\n  const namesUpper = [];\n\n  for (const n of names) {\n    // namesUpper.push(n[0].toUpperCase() + n.slice(1));\n    namesUpper.push(n.replace(n[0], n[0].toUpperCase()));\n  }\n  console.log(namesUpper.join(' '));\n};\n\ncapitalizeName('jessica ann smith davis'); // 'Jessica Ann Smith Davis'\n\n// Padding\nconst message = 'Go to gate 23!';\nconsole.log(message.padStart(20, '+').padEnd(30, '+'));\nconsole.log('Jonas'.padStart(20, '+').padEnd(30, '+'));\n\n// Credit card masking\nconst maskCreditCard = function (number) {\n  const str = number + ''; // Convert to string\n  const last = str.slice(-4);\n  return last.padStart(str.length, '*');\n};\n\nconsole.log(maskCreditCard(64637836)); // '****7836'\nconsole.log(maskCreditCard(43378463864647384)); // '*************7384'\n\n// Repeat\nconst message2 = 'Bad weather... All Departures Delayed... ';\nconsole.log(message2.repeat(5));\n\nconst planesInLine = function (n) {\n  console.log(`There are ${n} planes in line ${'\ud83d\udee9'.repeat(n)}`);\n};\n\nplanesInLine(5); // There are 5 planes in line \ud83d\udee9\ud83d\udee9\ud83d\udee9\ud83d\udee9\ud83d\udee9\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#practical-exercises","title":"Practical Exercises","text":""},{"location":"javascript/09-data-structures-operators/#string-exercise-camel-case-converter","title":"String Exercise: Camel Case Converter","text":"<pre><code>document.body.append(document.createElement('textarea'));\ndocument.body.append(document.createElement('button'));\n\ndocument.querySelector('button').addEventListener('click', function () {\n  const text = document.querySelector('textarea').value;\n  const rows = text.split('\\n');\n\n  for (const [i, row] of rows.entries()) {\n    const [first, second] = row.toLowerCase().trim().split('_');\n    const output = `${first}${second.replace(\n      second[0],\n      second[0].toUpperCase()\n    )}`;\n    console.log(`${output.padEnd(20)}${'\u2705'.repeat(i + 1)}`);\n  }\n});\n\n// Input:\n// underscore_case\n// first_name\n// Some_Variable\n// calculate_AGE\n// delayed_departure\n\n// Output:\n// underscoreCase     \u2705\n// firstName          \u2705\u2705\n// someVariable       \u2705\u2705\u2705\n// calculateAge       \u2705\u2705\u2705\u2705\n// delayedDeparture   \u2705\u2705\u2705\u2705\u2705\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#arrayobject-destructuring-challenge","title":"Array/Object Destructuring Challenge","text":"<pre><code>const game = {\n  team1: 'Bayern Munich',\n  team2: 'Borrussia Dortmund',\n  players: [\n    [\n      'Neuer',\n      'Pavard',\n      'Martinez',\n      'Alaba',\n      'Davies',\n      'Kimmich',\n      'Goretzka',\n      'Coman',\n      'Muller',\n      'Gnarby',\n      'Lewandowski',\n    ],\n    [\n      'Burki',\n      'Schulz',\n      'Hummels',\n      'Akanji',\n      'Hakimi',\n      'Weigl',\n      'Witsel',\n      'Hazard',\n      'Brandt',\n      'Sancho',\n      'Gotze',\n    ],\n  ],\n  score: '4:0',\n  scored: ['Lewandowski', 'Gnarby', 'Lewandowski', 'Hummels'],\n  date: 'Nov 9th, 2037',\n  odds: {\n    team1: 1.33,\n    x: 3.25,\n    team2: 6.5,\n  },\n};\n\n// 1. Create one player array for each team\nconst [players1, players2] = game.players;\nconsole.log(players1, players2);\n\n// 2. Create variables for goalkeeper and field players (team1)\nconst [gk, ...fieldPlayers] = players1;\nconsole.log(gk, fieldPlayers);\n\n// 3. Create array of all players\nconst allPlayers = [...players1, ...players2];\nconsole.log(allPlayers);\n\n// 4. Create final1 array with original team1 + 3 substitute players\nconst players1Final = [...players1, 'Thiago', 'Coutinho', 'Perisic'];\n\n// 5. Create variables for odds\nconst {\n  odds: { team1, x: draw, team2 },\n} = game;\nconsole.log(team1, draw, team2);\n\n// 6. Function that receives unlimited number of player names\nconst printGoals = function (...players) {\n  console.log(`${players.length} goals were scored`);\n};\n\nprintGoals('Davies', 'Muller', 'Lewandowski', 'Kimmich');\nprintGoals(...game.scored);\n\n// 7. Print winner (team with lower odd)\nteam1 &lt; team2 &amp;&amp; console.log('Team 1 is more likely to win');\nteam1 &gt; team2 &amp;&amp; console.log('Team 2 is more likely to win');\n</code></pre>"},{"location":"javascript/09-data-structures-operators/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Destructuring makes code cleaner and more readable</li> <li>Spread operator is perfect for copying and combining arrays/objects</li> <li>Rest pattern collects remaining elements</li> <li>Short-circuiting provides elegant solutions for default values</li> <li>Sets are great for unique values, Maps for complex key-value pairs</li> <li>String methods are powerful for text manipulation</li> <li>Optional chaining prevents errors when accessing nested properties</li> </ol> <p>These modern features make JavaScript code more concise and powerful! \ud83d\ude80</p>"},{"location":"react/","title":"React Notes","text":"<p>Welcome to the React section! This area is currently being prepared and will soon contain comprehensive notes, examples, and best practices for learning React.</p>"},{"location":"react/#coming-soon","title":"\ud83d\udea7 Coming Soon","text":"<p>This section will include:</p>"},{"location":"react/#react-fundamentals","title":"React Fundamentals","text":"<ul> <li>Components and JSX</li> <li>Props and State</li> <li>Event Handling</li> <li>Conditional Rendering</li> <li>Lists and Keys</li> </ul>"},{"location":"react/#react-hooks","title":"React Hooks","text":"<ul> <li>useState and useEffect</li> <li>Custom Hooks</li> <li>useContext and useReducer</li> <li>Performance Hooks (useMemo, useCallback)</li> </ul>"},{"location":"react/#advanced-concepts","title":"Advanced Concepts","text":"<ul> <li>Context API</li> <li>Error Boundaries</li> <li>Code Splitting</li> <li>Testing React Components</li> </ul>"},{"location":"react/#react-ecosystem","title":"React Ecosystem","text":"<ul> <li>React Router</li> <li>State Management (Redux, Zustand)</li> <li>Styling Solutions</li> <li>Build Tools and Deployment</li> </ul>"},{"location":"react/#note-structure","title":"\ud83d\udcdd Note Structure","text":"<p>Each topic will include:</p> <ul> <li>Clear explanations with code examples</li> <li>Real-world use cases</li> <li>Common patterns and best practices</li> <li>Troubleshooting tips</li> <li>Interactive examples</li> </ul>"},{"location":"react/#learning-path","title":"\ud83c\udfaf Learning Path","text":"<p>The React notes will be organized in a progressive learning path, building from basic concepts to advanced patterns, ensuring a solid foundation for modern React development.</p> <p>This section is being actively developed. Check back soon for comprehensive React learning materials!</p>"}]}